import { Exploit, ExploitPolicies, VersionPropertyStore } from "../exploit";

export class MonoSPUpload extends Exploit{
    static readonly _name = "MonoSPUpload";
    public _policies: ExploitPolicies = {
        stateManagerUnpatchLegal: true,
    };

    protected getPropertyStore(): VersionPropertyStore {
        return {
            address: {
                'S1.600': 0x00013d78,
                'S1.500': 0x00013b8c,
                'S1.400': 0x00013a84,
                'S1.300': 0x00012c34,
                'S1.200': 0x000129c0,
                'S1.100': 0x00012910,
                'S1.000': 0x00013e6c,

                'R1.000': 0x000576e8,
                'R1.100': 0x00057f8c,
                'R1.200': 0x00058cf8,
                'R1.300': 0x0005904c,
                'R1.400': 0x000590ec,
            },
            value: {
                'S1.000,S1.600,S1.500': new Uint8Array([0x00, 0x46, 0x2a, 0xf0]),
                'S1.400': new Uint8Array([0x00, 0x46, 0x29, 0xf0]),
                'S1.300': new Uint8Array([0x00, 0x46, 0x28, 0xf0]),
                'S1.200': new Uint8Array([0x00, 0x46, 0x27, 0xf0]),
                'S1.100': new Uint8Array([0x28, 0x1c, 0x00, 0x46]),


                'R1.000,R1.100,R1.200,R1.300,R1.400': new Uint8Array([0x03, 0x29, 0x0b, 0xe0]),
            },
        };
    }

    async init() {
        await this.stateManager.patch(this.getProperty("address"), this.getProperty("value"));
    }
}