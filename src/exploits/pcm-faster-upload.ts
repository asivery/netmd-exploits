import { patch, unpatch } from 'netmd-js';
import { Exploit, VersionPropertyStore } from '../exploit';
import { formatUIntQuery } from '../utils';

export class PCMFasterUpload extends Exploit {
    static _name = 'PCMFasterUpload';

    public _policies = {
        stateManagerUnpatchLegal: true,
    };

    protected getPropertyStore(): VersionPropertyStore {
        return {
            patch1Address: {
                'S1.600': 0x000783cc,
                'S1.500': 0x000779d4,
                'S1.400': 0x00077300,
                'S1.300': 0x00073c40,
                'S1.200': 0x0007258c,
                'S1.100': 0x00071c04,
                'S1.000': 0x0007852c,
            },
            patch1Value: {
                'S*': formatUIntQuery('41310160'),
            },
            patch2Address: {
                'S1.600': 0x0001ac9c,
                'S1.500': 0x0001aa94,
                'S1.400': 0x0001a820,
                'S1.300': 0x000198f8,
                'S1.200': 0x00019628,
                'S1.100': 0x00019464,
                'S1.000': 0x0001ad94,
            },
            patch2Value: {
                'S*': formatUIntQuery('000f0fe0'),
            },
        };
    }

    async init() {
        await super.init();
        await patch(
            this.factoryIface,
            this.getProperty('patch1Address'),
            this.getProperty('patch1Value'),
            this.stateManager.getIncrementalPatchNumber(),
            this.stateManager.getMaxPatchesAmount()
        );
        await patch(
            this.factoryIface,
            this.getProperty('patch2Address'),
            this.getProperty('patch2Value'),
            this.stateManager.getIncrementalPatchNumber(),
            this.stateManager.getMaxPatchesAmount()
        );
    }
}
