import { Exploit, VersionPropertyStore } from '../exploit';
import { sleep } from 'netmd-js/dist/utils';
import { MemoryOpenType, MemoryType } from 'netmd-js';

const MAX_WAIT = 20000;

export class WaitForDiscToStopSpinning extends Exploit {
    static _name = 'WaitForDiscToStopSpinning';

    protected getPropertyStore(): VersionPropertyStore {
        return {};
    }

    async wait() {
        if (this.stateManager.device.versionCode.startsWith('R') || this.stateManager.device.isHimd) {
            await sleep(MAX_WAIT);
            return;
        }

        const time = new Date().getTime();
        const address = this.getFirmwareProperty('g_disc_spin_state');
        await this.factoryIface.changeMemoryState(address, 1, MemoryType.MAPPED, MemoryOpenType.READ);
        for (;;) {
            let newState = (await this.factoryIface.read(address, 1, MemoryType.MAPPED))[0];
            if (((newState >> 4) & 1) !== 0 || new Date().getTime() - time > MAX_WAIT) break;
            await sleep(500);
        }
        await this.factoryIface.changeMemoryState(address, 1, MemoryType.MAPPED, MemoryOpenType.CLOSE);
        const duration = new Date().getTime() - time;
        this.log(`Had to wait ${duration} ms`);
    }
}
